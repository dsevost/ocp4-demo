---
- name: Check KVM device file
  file:
    path: /dev/kvm
    owner: root
    group: kvm
    mode: 0660

- name: "Install packages for Virtualization"
  package:
    name: "{{ item }}"
    state: present
  with_items:
  - libvirt
  - libvirt-devel
  - libvirt-daemon-kvm
  - libxml2
  - qemu-kvm
  - "{{ 'python3-firewall' if ansible_distribution == 'Fedora' else 'python-firewall' }}"
  - "{{ 'python3-libvirt' if ansible_distribution == 'Fedora' else 'python-libvirt' }}"
  - "{{ 'python3-lxml' if ansible_distribution == 'Fedora' else 'python-lxml' }}"

- name: "Enable and start LibvirtD service"
  service:
    name: libvirtd
    state: started
    enabled: true
  ignore_errors: true

- name: "Disable libvirtd TLS listener"
  lineinfile:
    path: "{{ libvirtd_conf }}"
    regex: "^listen_tls"
    line: "listen_tls = 0"
  notify: libvirtd_service

- name: "Enable libvirtd TCP listener"
  lineinfile:
    path: "{{ libvirtd_conf }}"
    regex: "^listen_tcp"
    line: "listen_tcp = 1"
  notify: libvirtd_service

- name: "Disable libvirtd auth for incoming TCP connection"
  lineinfile:
    path: "{{ libvirtd_conf }}"
    regex: "^auth_tcp"
    line: 'auth_tcp = "none"'
  notify: libvirtd_service

- name: "Setup libvirtd TCP port listener"
  lineinfile:
    path: "{{ libvirtd_conf }}"
    regex: "^tcp_port"
    line: 'tcp_port = "{{ libvirtd_listen_port }}"'
  notify: libvirtd_service

- name: "Enable libvirtd GLOBAL listener"
  lineinfile:
    path: "{{ libvirtd_opts }}"
    regex: "LIBVIRTD_ARGS="
    line: 'LIBVIRTD_ARGS="--listen"'
  notify: libvirtd_service

- name: "Allow 'wheel' group manage Libvirt daemon"
  copy:
    src: 80-libvirt.rules
    dest: /etc/polkit-1/rules.d

- name: "Allow IP forwarding"
  copy:
    content: "net.ipv4.ip_forward = 1"
    dest: /etc/sysctl.d/90-ipforward.conf
  notify:
  - apply_sysctl

- name: "Manage Firewall Rules for Libvirt"
  firewalld:
    source: "{{ real_network }}"
    port: 16509/tcp
    permanent: yes
    state: enabled
  notify: 
  - firewalld_service

- name: "Create 'default' pool"
  virt_pool:
    command: define
    name: default
    xml: '{{ lookup("file", "files/libvirt-default-pool.xml") }}'
    state: active
    autostart: true

#- name: "Check Libvirt pool"
#  environment:
#    LANG: "en_US"
#  changed_when: false
#  shell: |
#    virsh pool-list | grep default
#  register: pool_list
#  ignore_errors: true

##- debug: var=pool_list

#- block:
#  - name: "Copy pool definition"
#    copy:
#      src: libvirt-default-pool.xml
#      dest: /tmp
#  - name: "Create 'default' pool"
#    shell: |
#      virsh pool-define /tmp/libvirt-default-pool.xml
#  - name: "Start 'default' pool"
#    shell: |
#      virsh pool-start default
#  - name: "Set 'default' pool to autostart"
#    shell: |
#      virsh pool-autostart default
#  when:
#  - pool_list.stdout is not search('default.*active.*yes')

- name: "Create Libvirtd Hooks Directory"
  file:
    path: /etc/libvirt/hooks
    state: directory

- set_fact:
    hypervisor_net: "{{ hypervisor_cidr | ipaddr('network/prefix') }}"

- name: "Install Libvirt Network hook"
  template:
    src: network.j2
    dest: /etc/libvirt/hooks/network
    mode: 0755
